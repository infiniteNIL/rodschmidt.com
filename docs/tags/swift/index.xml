<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Rod Schmidt</title>
    <link>rodschmidt.com/tags/swift/</link>
    <description>Recent content in Swift on Rod Schmidt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Aug 2019 17:47:09 +0000</lastBuildDate>
    
	<atom:link href="rodschmidt.com/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Swift UI &amp; App Architecture: A New Approach Required</title>
      <link>rodschmidt.com/posts/swift-ui-app-architecture-a-new-approach-required/</link>
      <pubDate>Sun, 04 Aug 2019 17:47:09 +0000</pubDate>
      
      <guid>rodschmidt.com/posts/swift-ui-app-architecture-a-new-approach-required/</guid>
      <description>With SwiftUI, everything has changed. As Brent Simmons said, it’s the end of the NeXT era and the beginning of the Swift era.
With the coming of SwiftUI, most of our app architectures are no longer valid (or at least parts of them). They need to be adjusted. MVC is certainly out. In fact, even controllers seem to be out. From Apple’s content, it seems all we have is models and views, and that’s true.</description>
    </item>
    
    <item>
      <title>The Clean Architecture: An Example</title>
      <link>rodschmidt.com/posts/the-clean-architecture-an-example/</link>
      <pubDate>Sun, 29 Jan 2017 21:33:02 +0000</pubDate>
      
      <guid>rodschmidt.com/posts/the-clean-architecture-an-example/</guid>
      <description>Today, I’d like to take an example iOS app written with an MVC architecture and show you what the example would be with a Clean Swift architecture. The example I’ve chosen to use is the Quiz app from chapter 1 of the 3rd edition of iOS Programming: The Big Nerd Ranch Guide.
The Quiz is a simple app that is like flash cards. It looks like this:
The Show Answer button will reveal the answer to the question and tapping on the Next Question button will display the next question.</description>
    </item>
    
    <item>
      <title>5 Ways to Avoid Force Unwrapping</title>
      <link>rodschmidt.com/posts/5-ways-to-avoid-force-unwrapping/</link>
      <pubDate>Wed, 16 Nov 2016 18:02:53 +0000</pubDate>
      
      <guid>rodschmidt.com/posts/5-ways-to-avoid-force-unwrapping/</guid>
      <description>Someone on the reddit iOS Programming group asked “What are the mistakes generally done by iOS developers while coding in Swift?”A lot of comments were about using force unwrapping on optionals. Comments such as:
 Force unwrapping everything Using pyramids of if-let as opposed to guard statements var firstName: String! ugh Overuse of force unwrapped optionals. I cringe when I see that especially when a simple one-liner guard statement would make the code a ton safer.</description>
    </item>
    
    <item>
      <title>Part 4: What Are the Downsides to Putting the Core Data MOC in the App Delegate</title>
      <link>rodschmidt.com/posts/part-4-what-are-the-downsides-to-putting-the-core-data-moc-in-the-app-delegate/</link>
      <pubDate>Tue, 01 Nov 2016 21:49:48 +0000</pubDate>
      
      <guid>rodschmidt.com/posts/part-4-what-are-the-downsides-to-putting-the-core-data-moc-in-the-app-delegate/</guid>
      <description>In part 3, I talked about why putting the MOC in the app delegate makes any code that uses the MOC will be dependent on the app delegate and why that’s not a good thing.
In part 2, I talked about why putting the MOC in the app delegate is a violation of the Single Responsibility Principle.
In part 1, I talked about why putting the MOC in your app delegate makes you dependent on Core Data for your application’s persistence.</description>
    </item>
    
    <item>
      <title>Swift Robot Arm</title>
      <link>rodschmidt.com/posts/swift-robot-arm/</link>
      <pubDate>Tue, 11 Oct 2016 22:36:54 +0000</pubDate>
      
      <guid>rodschmidt.com/posts/swift-robot-arm/</guid>
      <description>In a previous post, I wrote about controlling my OWI robot arm with Elixir. Well, I decided to port that to Swift!
In that post, there’s a link to some code that does it in Objective-C with IOKit. I first tried to just do a straight port and use IOKit in Swift. That didn’t work to well. The IOKit API is an old Core Foundation library and even has some old COM style APIs.</description>
    </item>
    
  </channel>
</rss>